S_box=[ 0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
        0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
        0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
        0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
        0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
        0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
        0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
        0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
        0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
        0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
        0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
        0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
        0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
        0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
        0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
        0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16 ]


S_box_inv=[ 0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
            0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
            0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
            0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
            0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
            0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
            0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
            0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
            0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
            0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
            0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
            0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
            0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
            0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
            0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
            0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]



#def expand_key(key):
    #key=convert_data_to_matrix(key)
    #key_vector=[]
    #i=0
    #for j in range(4,44):
        #for k in range(4):
            #byte=key[i][k]^key[j-1][k]
            #key_vector.append(byte)
        #i=i+1
        #key.append(key_vector)
        #key_vector=[]

    #return key

def g_fun(subkey,roundno):
    rounds = ["0x01","0x02","0x04","0x08","0x10","0x20","0x40","0x80","0x1B","0x36"]
    subkey[0],subkey[1],subkey[2],subkey[3] = subkey[1],subkey[2],subkey[3],subkey[0]

    for i in range(4):
        subkey[i] = S_box[subkey[i]]
    roundno=int(roundno)
    subkey[0] = subkey[0] ^ int(rounds[roundno-1],16)
    return subkey


def expand_key(key):
    key=convert_data_to_matrix(key)
    key_vector=[]
    i=0
    for j in range(4,44):
        if j%4 == 0:
            res = g_fun(key[j-1],j/4)
        else :
            res = key[j-1]
        for k in range(4):
            byte=key[i][k]^res[k]
            key_vector.append(byte)
        i=i+1
        key.append(key_vector)
        key_vector=[]

    return key


def add_key(data_matrix,round_key_matrix):
    for i in range(4):
        for j in range(4):
            data_matrix[i][j]=data_matrix[i][j]^round_key_matrix[i][j]
    return data_matrix



def sub_bytes(state_matrix):
    for i in range(4):
        for j in range(4):
            state_matrix[i][j]=S_box[state_matrix[i][j]]
    return state_matrix


def inv_sub_bytes(state_matrix):
    for i in range(4):
        for j in range(4):
            state_matrix[i][j]=S_box_inv[state_matrix[i][j]]
    return state_matrix


def shift_rows(state_matrix):
    state_matrix[0][1], state_matrix[1][1], state_matrix[2][1], state_matrix[3][1] = state_matrix[1][1], state_matrix[2][1], state_matrix[3][1], state_matrix[0][1]
    state_matrix[0][2], state_matrix[1][2], state_matrix[2][2], state_matrix[3][2] = state_matrix[2][2], state_matrix[3][2], state_matrix[0][2], state_matrix[1][2]
    state_matrix[0][3], state_matrix[1][3], state_matrix[2][3], state_matrix[3][3] = state_matrix[3][3], state_matrix[0][3], state_matrix[1][3], state_matrix[2][3]
    return state_matrix


def inv_shift_rows(state_matrix):
    state_matrix[0][1], state_matrix[1][1], state_matrix[2][1], state_matrix[3][1] = state_matrix[3][1], state_matrix[0][1], state_matrix[1][1], state_matrix[2][1]
    state_matrix[0][2], state_matrix[1][2], state_matrix[2][2], state_matrix[3][2] = state_matrix[2][2], state_matrix[3][2], state_matrix[0][2], state_matrix[1][2]
    state_matrix[0][3], state_matrix[1][3], state_matrix[2][3], state_matrix[3][3] = state_matrix[1][3], state_matrix[2][3], state_matrix[3][3], state_matrix[0][3]
    return state_matrix




def mul_by_2(num):
    if num & 0x80 :
        num=((num << 1)^0x1B)&0xFF
    else:
        num=num<<1
    return num
def mul_by_3(num):
    num = num ^ mul_by_2(num)
    return num

def mul_by_4(num):
    return mul_by_2(mul_by_2(num))

def mul_by_8(num):
    return mul_by_2(mul_by_4(num))

def mul_by_9(num):
    return mul_by_8(num)^num

def mul_by_11(num):
    num=mul_by_8(num)^mul_by_3(num)
    return num


def mul_by_13(num):
    return  mul_by_9(num)^mul_by_4(num)


def mul_by_14(num):
    return mul_by_8(num)^mul_by_4(num)^mul_by_2(num)





def mix_columns(state_matrix):
    for i in range(4):
        a,b,c,d=state_matrix[i][0],state_matrix[i][1],state_matrix[i][2],state_matrix[i][3]
        state_matrix[i][0] = mul_by_2(a)^mul_by_3(b)^c^d
        state_matrix[i][1] = a^mul_by_2(b)^mul_by_3(c)^d
        state_matrix[i][2] =  a^b^mul_by_2(c)^mul_by_3(d)
        state_matrix[i][3] =  b^c^mul_by_2(d)^mul_by_3(a)
    return state_matrix

def inv_mix_columns(state_matrix):
    for i in range(4):
        a,b,c,d=state_matrix[i][0],state_matrix[i][1],state_matrix[i][2],state_matrix[i][3]
        state_matrix[i][0] = mul_by_14(a)^mul_by_11(b)^mul_by_13(c)^mul_by_9(d)
        state_matrix[i][1] = mul_by_9(a)^mul_by_14(b)^mul_by_11(c)^mul_by_13(d)
        state_matrix[i][2] = mul_by_13(a)^mul_by_9(b)^mul_by_14(c)^mul_by_11(d)
        state_matrix[i][3] = mul_by_11(a)^mul_by_13(b)^mul_by_9(c)^mul_by_14(d)
    return state_matrix

def encrypt(state_matrix, key_matrix):
            state_matrix=sub_bytes(state_matrix)
            state_matrix=shift_rows(state_matrix)
            state_matrix=mix_columns(state_matrix)
            state_matrix=add_key(state_matrix, key_matrix)
            return state_matrix

def decrypt(state_matrix,key_matrix):
            state_matrix=add_key(state_matrix,key_matrix)
            state_matrix=inv_mix_columns(state_matrix)
            state_matrix=inv_shift_rows(state_matrix)
            state_matrix=inv_sub_bytes(state_matrix)
            return state_matrix


def convert_matrix_to_data(state_matrix):
        text = 0
        for i in range(4):
            for j in range(4):
                text=text<<8
                text = text | state_matrix[i][j]
        return text

def convert_data_to_matrix(data):
    matrix0=[]
    matrix1=[]
    matrix2=[]
    matrix3=[]
    for i in range(16):
        byte= (data>>(8*(15-i)) ) & 0xFF
        x=int(i/4)
        if x == 0:
            matrix0.append(byte)
        if x == 1:
            matrix1.append(byte)
        if x == 2:
            matrix2.append(byte)
        if x == 3:
            matrix3.append(byte)
    matrix=[matrix0,matrix1,matrix2,matrix3]
    return matrix

def call_AES(data,key):
    data_matrix=convert_data_to_matrix(data)
    round_key_matrix=expand_key(key)
    state_matrix=add_key(data_matrix,round_key_matrix[0:4])
    for i in range(9):
        state_matrix=encrypt(state_matrix,round_key_matrix[4*(i+1) : 4*(i+2)])

        print("Data after:",i+1,"th encryption:")
        data=convert_matrix_to_data(state_matrix)
        print(data)

    state_matrix=sub_bytes(state_matrix)
    state_matrix=shift_rows(state_matrix)
    state_matrix=add_key(state_matrix,round_key_matrix[40:44])
    print("Encrypted data is:")
    data=convert_matrix_to_data(state_matrix)
    print(data)

    state_matrix=add_key(state_matrix,round_key_matrix[40:44])
    state_matrix=inv_shift_rows(state_matrix)
    state_matrix=inv_sub_bytes(state_matrix)
    for i in range(1,10):
        data=convert_matrix_to_data(state_matrix)
        state_matrix=decrypt(state_matrix,round_key_matrix[4*(10-i) : 4*(11-i)])

        print("Data after",10-i," decryption:")
        #data=convert_matrix_to_data(state_matrix)
        print(data)
    data_matrix=add_key(state_matrix,round_key_matrix[0:4])
    data=convert_matrix_to_data(data_matrix)
    print("Decrypted:",data)
    print("Decrypted data is:")
    data = hex(data)
    data = bytes.fromhex(data[2:]).decode('utf-8')
    print(data)


if __name__ == '__main__':
    data=input("Input data to be Encrypted:")
    data=int(data.encode('utf-8').hex(),16)
    key=input("Input 128 bit key(hex form) to encrypt data you have entered:")
    key=int(key,16)
    print("Data to be Encrypted:")
    print(data)
    print("128 bit key used:")
    print(key)
    call_AES(data,key)
